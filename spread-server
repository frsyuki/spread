#!/usr/bin/env ruby
#
#  SpreadOSD
#  Copyright (C) 2010  FURUHASHI Sadayuki
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'spread'
require 'optparse'

include SpreadOSD

op = OptionParser.new
op.banner += " <boot.yaml>"

(class<<self;self;end).module_eval do
	define_method(:usage) do |msg|
		puts op.to_s
		puts "error: #{msg}" if msg
		exit 1
	end
end

begin
	if ARGV.length < 1
		usage "<boot.yaml> is required."
	elsif ARGV.length != 1
		usage nil
	end

	boot_path = ARGV.shift

	boot_info = BootInfo.new
	boot_info.read(boot_path)

rescue
	usage $!.to_s
end

BootInfoService.init
$ebus.signal(:boot_info_loaded, boot_info)

self_node = boot_info.node
roles = self_node.roles.dup

osd = true if roles.delete(:osd)
mds = true if roles.delete(:mds)
gw  = true if roles.delete(:gw)

unless roles.empty?
	usage "unknown role: #{roles.inspect}"
end

if !osd && !mds && !gw
	usage "at least one of osd, mds and gw role are requred"
end

if osd
	OSDRoleService.init
end

if mds
	MDSRoleService.init
end

if gw
	GatewayRoleService.init
end

if mds
	TermFeederService.init
	HeartbeatServerService.init
elsif osd
	TermEaterService.init
	HeartbeatClientService.init
else  # gw only
	HeartbeatLeanerService.init
end

begin
	$ebus.signal(:run)

	rpc = RPCDispatcher.new

	$net.serve(rpc)

	port = self_node.address.port
	$net.listen('0.0.0.0', port)

	$ebus.signal(:timer_clock)
	$net.start_timer(1.0, true) do
		$ebus.signal(:timer_clock)
	end

	$log.info "run on #{port}"

	$net.run

ensure
	$ebus.signal(:shutdown)
end

