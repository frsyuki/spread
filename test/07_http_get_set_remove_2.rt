#!/usr/bin/env ruby
$LOAD_PATH << File.dirname(__FILE__)
require 'common'

LOOP   = (ARGV[0] || ENV["LOOP"] || (ENV["HEAVY"] ? 20 : 3)).to_i
SIZE   = (ARGV[1] || 10).to_i
NUM    = (ARGV[2] || 50).to_i

mds = start_mds
cs = start_cs
ds0 = start_ds(0, 0)
ds1 = start_ds(1, 0)
ds2 = start_ds(2, 1)
ds3 = start_ds(3, 1)

cs.show_nodes
cs.show_version

gw = start_gw

pid = Process.pid
keyf = "#{pid}-key%d"
_data = "@"*SIZE

test "run normally" do
	LOOP.times {|o|
		NUM.times do |i|
			key = keyf % i
			_attrs = {"loop"=>o.to_s, "attr#{i}"=>i.to_s}

			test 'add_data PUT /data' do
				gw.http_client {|http|
					req = Net::HTTP::Put.new("/data/#{key}")
					req.body = _data
					res = http.request(req)
					test_equals "202", res.code, "add_data 202 Accepted"
				}
			end

			test 'update_attrs PUT /attrs' do
				gw.http_client {|http|
					req = Net::HTTP::Put.new("/attrs/#{key}")
					req.body = JSON.dump(_attrs)
					res = http.request(req)
					test_equals "202", res.code, "update_attrs 202 Accepted"
				}
			end
		end

		NUM.times do |i|
			key = keyf % i
			_attrs = {"loop"=>o.to_s, "attr#{i}"=>i.to_s}

			test 'get_data /api' do
				data = nil

				gw.http_client {|http|
					res = http.get("/api/get_data?key=#{key}")
					test_equals "200", res.code, "get_data 200 OK"
					data = res.body
				}

				test_equals _data, data, 'get_data _data == data'
			end

			test "get_attrs /api" do
				attrs = nil

				gw.http_client {|http|
					res = http.get("/api/get_attrs?key=#{key}")
					test_equals "200", res.code, "get_attrs 200 OK"
					attrs = JSON.parse(res.body)
				}

				test_equals _attrs, attrs, 'get_attrs _attrs == attrs'
			end
		end

		NUM.times do |i|
			key = keyf % i

			test "remove /api" do
				gw.http_client {|http|
					req = Net::HTTP::Post.new('/api/remove')
					req.set_form_data({:key=>key})
					res = http.request(req)
					test_equals "200", res.code, "remove 200 OK"
				}
			end
		end

		NUM.times do |i|
			key = keyf % i

			test 'removed get_data /api' do
				gw.http_client {|http|
					res = http.get("/api/get_data?key=#{key}")
					test_equals "404", res.code, 'get_data 404 Not Found'
				}
			end

			test 'removed get_attrs /api' do
				gw.http_client {|http|
					res = http.get("/api/get_attrs?key=#{key}")
					test_equals "404", res.code, 'get_attrs 404 Not Found'
				}
			end
		end
	}
end

cs.show_items
cs.show_stat

term_all(ds0, ds1, ds2, ds3, gw, mds, cs)

