#!/usr/bin/env ruby
$LOAD_PATH << File.dirname(__FILE__)
require 'common'

NUM    = (ARGV[2] || 10).to_i

mds = start_mds
cs = start_cs
ds0 = start_ds(0, 0)
ds1 = start_ds(1, 0)
ds2 = start_ds(2, 1)
ds3 = start_ds(3, 1)

cs.show_nodes
cs.show_version

gw = start_gw(0)
gw_ro1 = start_gw(1, "--snapshot 1")
gw_ro2 = start_gw(2, "--snapshot 2")
gw_ro3 = start_gw(3, "--snapshot 3")
gw_ro0 = start_gw(4, "--snapshot 0")

pid = Process.pid
keyf = "#{pid}-key%d"

test "run normally" do
	c = gw.client
	c_ro0 = gw_ro0.client
	c_ro1 = gw_ro1.client
	c_ro2 = gw_ro2.client
	c_ro3 = gw_ro3.client

	NUM.times do |i|
		key = keyf % i
		attrs1 = {"loop"=>"0", "attr#{i}"=>i.to_s}
		data1 = "snapshot-1"

		test 'set' do
			c.call(:set, key, data1, attrs1)
		end
	end

	test 'take snapshot 1' do
		cs.add_snapshot("ss1")
	end
	sleep 2

	NUM.times do |i|
		key = keyf % i
		attrs1 = {"loop"=>"0", "attr#{i}"=>i.to_s}
		data1 = "snapshot-1"

		test 'get head' do
			data_, attrs_ = c.call(:get, key)

			test_equals data1, data_, 'get data_ == data1'
			test_equals attrs1, attrs_, 'get attrs_ == attrs1'
		end
	end

	NUM.times do |i|
		key = keyf % i
		attrs2 = {"loop1"=>"0", "attr#{i}"=>"1"}
		data2 = "snapshot-2"

		test 'set' do
			c.call(:set, key, data2, attrs2)
		end
	end

	NUM.times do |i|
		key = keyf % i
		attrs1 = {"loop"=>"0", "attr#{i}"=>i.to_s}
		data1 = "snapshot-1"
		attrs2 = {"loop1"=>"0", "attr#{i}"=>"1"}
		data2 = "snapshot-2"

		test 'get head' do
			data_, attrs_ = c.call(:get, key)

			test_equals data2, data_, 'get data_ == data2'
			test_equals attrs2, attrs_, 'get attrs_ == attrs2'
		end

		test 'gets sid=0' do
			data_, attrs_ = c.call(:gets, 0, key)

			test_equals nil, data_, 'gets 0 data_ == nil'
			test_equals nil, attrs_, 'gets 0 attrs_ == nil'
		end

		test 'gets sid=1' do
			data_, attrs_ = c.call(:gets, 1, key)

			test_equals data1, data_, 'gets 1 data_ == data1'
			test_equals attrs1, attrs_, 'gets 1 attrs_ == attrs1'
		end

		test 'gets_data_attrs sid=1' do
			data_ = c.call(:gets_data, 1, key)
			attrs_ = c.call(:gets_attrs, 1, key)

			test_equals data1, data_, 'gets_data 1 data_ == data1'
			test_equals attrs1, attrs_, 'gets_attrs 1 attrs_ == attrs1'
		end

		test 'gets sid=2' do
			data_, attrs_ = c.call(:gets, 2, key)

			test_equals data2, data_, 'gets 2 data_ == data2'
			test_equals attrs2, attrs_, 'gets 2 attrs_ == attrs2'
		end

		test 'reads' do
			data_0_3 = c.call(:reads, 0, key, 0, 3)
			data_8_20 = c.call(:reads, 0, key, 8, 20)

			test_equals nil, data_0_3, 'reads 0 data_ 0-3 == nil'
			test_equals nil, data_8_20, 'reads 0 data_ 8-20 == nil'

			data_0_3 = c.call(:reads, 1, key, 0, 3)
			data_8_20 = c.call(:reads, 1, key, 8, 20)

			test_equals data1[0,3], data_0_3, 'reads 1 data_ 0-3 == data1[0,3]'
			test_equals data1[8,20], data_8_20, 'reads 1 data_ 8-20 == data1[8,20]'

			data_0_3 = c.call(:reads, 2, key, 0, 3)
			data_8_20 = c.call(:reads, 2, key, 8, 20)

			test_equals data2[0,3], data_0_3, 'reads 2 data_ 0-3 == data2[0,3]'
			test_equals data2[8,20], data_8_20, 'reads 2 data_ 8-20 == data2[8,20]'
		end
	end

	NUM.times do |i|
		key = keyf % i
		attrs1 = {"loop"=>"0", "attr#{i}"=>i.to_s}
		data1 = "snapshot-1"
		attrs2 = {"loop1"=>"0", "attr#{i}"=>"1"}
		data2 = "snapshot-2"

		test 'read-only gw get sid=0' do
			data_, attrs_ = c_ro0.call(:get, key)

			test_equals nil, data_, 'read-only gw 0 get data_ == nil'
			test_equals nil, attrs_, 'read-only gw 0 get attrs_ == nil'
		end

		test 'read-only gw get sid=1' do
			data_, attrs_ = c_ro1.call(:get, key)

			test_equals data1, data_, 'read-only gw 1 get data_ == data1'
			test_equals attrs1, attrs_, 'read-only gw 1 get attrs_ == attrs1'
		end

		test 'read-only gw get sid=2' do
			data_, attrs_ = c_ro2.call(:get, key)

			test_equals data2, data_, 'read-only gw 2 get data_ == data2'
			test_equals attrs2, attrs_, 'read-only gw 2 get attrs_ == attrs2'
		end

		test 'read-only gw read' do
			data_0_3 = c_ro1.call(:read, key, 0, 3)
			data_8_20 = c_ro1.call(:read, key, 8, 20)

			test_equals data1[0,3], data_0_3, 'read-only gw 1 data_ 0-3 == data1[0,3]'
			test_equals data1[8,20], data_8_20, 'read-only gw 1 data_ 8-20 == data1[8,20]'

			data_0_3 = c_ro1.call(:read, key, 0, 3)
			data_8_20 = c_ro1.call(:read, key, 8, 20)

			test_equals data1[0,3], data_0_3, 'read-only gw 1 data_ 0-3 == nil'
			test_equals data1[8,20], data_8_20, 'read-only gw 1 data_ 8-20 == nil'

			data_0_3 = c_ro2.call(:read, key, 0, 3)
			data_8_20 = c_ro2.call(:read, key, 8, 20)

			test_equals data2[0,3], data_0_3, 'read-only gw 2 data_ 0-3 == data2[0,3]'
			test_equals data2[8,20], data_8_20, 'read-only gw 2 data_ 8-20 == data2[8,20]'
		end
	end

	test 'take snapshot 2' do
		cs.add_snapshot("ss2")
	end
	sleep 2

	NUM.times do |i|
		key = keyf % i

		test 'remove' do
			c.call(:remove, key)
		end
	end

	NUM.times do |i|
		key = keyf % i
		attrs1 = {"loop"=>"0", "attr#{i}"=>i.to_s}
		data1 = "snapshot-1"
		attrs2 = {"loop1"=>"0", "attr#{i}"=>"1"}
		data2 = "snapshot-2"

		test 'removed get latest' do
			data_, attrs_ = c.call(:get, key)

			test_equals nil, data_, 'removed get data_ == nil'
			test_equals nil, attrs_, 'removed get attrs_ == nil'
		end

		test 'removed gets sid=0' do
			data_, attrs_ = c.call(:gets, 0, key)

			test_equals nil, data_, 'removed gets 0 data_ == nil'
			test_equals nil, attrs_, 'removed gets 0 attrs_ == nil'
		end

		test 'removed gets sid=1' do
			data_, attrs_ = c.call(:gets, 1, key)

			test_equals data1, data_, 'removed gets 1 data_ == data1'
			test_equals attrs1, attrs_, 'removed gets 1 attrs_ == attrs1'
		end

		test 'removed gets sid=2' do
			data_ = c.call(:gets_data, 2, key)
			attrs_ = c.call(:gets_attrs, 2, key)

			test_equals data2, data_, 'removed gets 1 data_ == data2'
			test_equals attrs2, attrs_, 'removed gets 1 attrs_ == attrs2'
		end

		test 'removed gets sid=3' do
			data_ = c.call(:gets_data, 3, key)
			attrs_ = c.call(:gets_attrs, 3, key)

			test_equals nil, data_, 'removed gets 3 data_ == nil'
			test_equals nil, attrs_, 'removed gets 3 attrs_ == nil'
		end

		test 'removed reads' do
			data_0_3 = c.call(:reads, 0, key, 0, 3)
			data_8_20 = c.call(:reads, 0, key, 8, 20)

			test_equals nil, data_0_3, 'reads 0 data_ 0-3 == nil'
			test_equals nil, data_8_20, 'reads 0 data_ 8-20 == nil'

			data_0_3 = c.call(:reads, 1, key, 0, 3)
			data_8_20 = c.call(:reads, 1, key, 8, 20)

			test_equals data1[0,3], data_0_3, 'reads 1 data_ 0-3 == data1[0,3]'
			test_equals data1[8,20], data_8_20, 'reads 1 data_ 8-20 == data1[8,20]'

			data_0_3 = c.call(:reads, 2, key, 0, 3)
			data_8_20 = c.call(:reads, 2, key, 8, 20)

			test_equals data2[0,3], data_0_3, 'reads 2 data_ 0-3 == data2[0,3]'
			test_equals data2[8,20], data_8_20, 'reads 2 data_ 8-20 == data2[8,20]'

			data_0_3 = c.call(:reads, 3, key, 0, 3)
			data_8_20 = c.call(:reads, 3, key, 8, 20)

			test_equals nil, data_0_3, 'reads 2 data_ 0-3 == nil'
			test_equals nil, data_8_20, 'reads 2 data_ 8-20 == nil'
		end
	end

	NUM.times do |i|
		key = keyf % i
		attrs1 = {"loop"=>"0", "attr#{i}"=>i.to_s}
		data1 = "snapshot-1"
		attrs2 = {"loop1"=>"0", "attr#{i}"=>"1"}
		data2 = "snapshot-2"

		test 'read-only gw removed get sid=0' do
			data_, attrs_ = c_ro0.call(:get, key)

			test_equals nil, data_, 'read-only gw 0 removed get data_ == nil'
			test_equals nil, attrs_, 'read-only gw 0 removed get attrs_ == nil'
		end

		test 'read-only gw removed get sid=1' do
			data_, attrs_ = c_ro1.call(:get, key)

			test_equals data1, data_, 'read-only gw 1 removed get data_ == data1'
			test_equals attrs1, attrs_, 'read-only gw 1 removed get attrs_ == attrs1'
		end

		test 'read-only gw removed get sid=2' do
			data_, attrs_ = c_ro2.call(:get, key)

			test_equals data2, data_, 'read-only gw 2 removed get data_ == data2'
			test_equals attrs2, attrs_, 'read-only gw 2 removed get attrs_ == attrs2'
		end

		test 'read-only gw removed get sid=3' do
			data_, attrs_ = c_ro3.call(:get, key)

			test_equals nil, data_, 'read-only gw 3 removed get data_ == nil'
			test_equals nil, attrs_, 'read-only gw 3 removed get attrs_ == nil'
		end

		test 'read-only gw removed read' do
			data_0_3 = c_ro1.call(:read, key, 0, 3)
			data_8_20 = c_ro1.call(:read, key, 8, 20)

			test_equals data1[0,3], data_0_3, 'read-only gw 1 data_ 0-3 == data1[0,3]'
			test_equals data1[8,20], data_8_20, 'read-only gw 1 data_ 8-20 == data1[8,20]'

			data_0_3 = c_ro1.call(:read, key, 0, 3)
			data_8_20 = c_ro1.call(:read, key, 8, 20)

			test_equals data1[0,3], data_0_3, 'read-only gw 1 data_ 0-3 == data1[0,3]'
			test_equals data1[8,20], data_8_20, 'read-only gw 1 data_ 8-20 == data1[8,20]'

			data_0_3 = c_ro2.call(:read, key, 0, 3)
			data_8_20 = c_ro2.call(:read, key, 8, 20)

			test_equals data2[0,3], data_0_3, 'read-only gw 2 data_ 0-3 == data1[0,3]'
			test_equals data2[8,20], data_8_20, 'read-only gw 2 data_ 8-20 == data1[8,20]'

			data_0_3 = c_ro3.call(:read, key, 0, 3)
			data_8_20 = c_ro3.call(:read, key, 8, 20)

			test_equals nil, data_0_3, 'read-only gw 2 data_ 0-3 == nil'
			test_equals nil, data_8_20, 'read-only gw 2 data_ 8-20 == nil'
		end
	end
end

cs.show_items
cs.show_stat
cs.show_snapshot

term_all(ds0, ds1, ds2, ds3, gw, mds, cs)

